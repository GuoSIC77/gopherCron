syntax = "proto3";

package cronpb;
option go_package = ".;cronpb";

service Center {
    rpc Auth (AuthReq) returns (AuthReply) {}
    rpc TryLock (stream TryLockRequest) returns (stream TryLockReply) {}
    rpc RegisterAgent (stream RegisterAgentReq) returns (stream Event) {}
    rpc StatusReporter (ScheduleReply) returns (Result) {}
    // 面向中心的接口
    rpc SendEvent (SendEventRequest) returns (Result) {}
    rpc RemoveStream (RemoveStreamRequest) returns (Result) {}
}

message AuthReq {
    map<int64, string> kvs = 1;
}

message AuthReply {
    string jwt = 1;
    int64 expire_time = 2;
}

message RemoveStreamRequest {
    string client = 1;
}

message SendEventRequest {
    string region = 1;
    int64 project_id = 2;
    Event event = 3;
}

message TryLockRequest {
    int64 project_id = 1;
    string task_id = 2;
    string agent_ip = 3;
}

message TryLockReply {
    bool result = 1;
    string message = 2;
}

message RegisterAgentReq {
    // string org_id = 1;
    // int64 project_id = 2;
    // int32 weight = 3;
    repeated AgentInfo agents = 1;
}

message AgentInfo {
    string Version = 1;
    repeated int64 Systems = 2;
    string ServiceName = 3;
    repeated MethodInfo Methods = 4;
    string Region = 5;
    string Host = 6;
    int32 Port = 7;
    int32 Weight = 8;
    string Runtime = 9;
    map<string,string> Tags = 10;
    string OrgID = 11;
}

message MethodInfo {
    string Name = 1; 
    bool IsClientStream = 2;
    bool IsServerStream = 3;
}

message Event {
    string version = 1;
    string type = 2;
    bytes value = 3;
    int64 event_time = 4;
}

service Agent {
    // 通过该服务下发调度任务给agent，agent收到后开始加锁
    // 1.加锁成功进行执行
    // 2.通过stream反馈给中心任务开始执行
    // 3.任务执行结束后通过stream上报任务完成，若中途stream中断，中心则尝试重新连接恢复上下文，若10秒后仍未建连，则agent主动kill掉任务并上报任务执行失败
    rpc Schedule(ScheduleRequest) returns (Result) {}
    rpc CheckRunning(CheckRunningRequest) returns (Result) {}
    rpc KillTask(KillTaskRequest) returns (Result) {}
    rpc ProjectTaskHash(ProjectTaskHashRequest) returns (ProjectTaskHashReply) {}
    rpc Command(CommandRequest) returns (Result) {}
}

message CommandRequest {
    string command = 1;
    map<string,string> args = 2;
}

message ProjectTaskHashRequest {
    int64 project_id = 1;
}

message ProjectTaskHashReply {
    string hash = 1;
    int64 latest_update_time = 2;
}

message CheckRunningRequest {
    int64 project_id = 1;
    string task_id = 2;
}

message KillTaskRequest {
    int64 project_id = 1;
    string task_id = 2;
}

message Result {
    bool result = 1;
    string message = 2;
}

message ScheduleRequest {
    Event event = 1;
}

message ScheduleReply {
    int64 project_id = 2;
    Event event = 1;
}
