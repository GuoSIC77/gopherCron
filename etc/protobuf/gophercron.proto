syntax = "proto3";

package cronpb;
option go_package = ".;cronpb";

service Center {
    rpc Auth (AuthReq) returns (AuthReply) {}
    rpc TryLock (stream TryLockRequest) returns (stream TryLockReply) {}
    rpc RegisterAgent (stream RegisterAgentReq) returns (stream Event) {}
    rpc RegisterAgentV2 (stream ClientEvent) returns (stream ServiceEvent) {}
    rpc StatusReporter (ScheduleReply) returns (Result) {}
    // 面向中心的接口
    rpc SendEvent (SendEventRequest) returns (Result) {}
    rpc RemoveStream (RemoveStreamRequest) returns (Result) {}
}

message AuthReq {
    map<int64, string> kvs = 1;
}

message AuthReply {
    string jwt = 1;
    int64 expire_time = 2;
}

message RemoveStreamRequest {
    string client = 1;
}

message SendEventRequest {
    string region = 1;
    int64 project_id = 2;
    Event event = 3;
}

message TryLockRequest {
    int64 project_id = 1;
    string task_id = 2;
    string agent_ip = 3;
}

message TryLockReply {
    bool result = 1;
    string message = 2;
}

message RegisterAgentReq {
    // string org_id = 1;
    // int64 project_id = 2;
    // int32 weight = 3;
    repeated AgentInfo agents = 1;
}

message RegisterInfo {
    repeated AgentInfo agents = 3;
}

message AgentInfo {
    string Version = 1;
    repeated int64 Systems = 2;
    string ServiceName = 3;
    repeated MethodInfo Methods = 4;
    string Region = 5;
    string Host = 6;
    int32 Port = 7;
    int32 Weight = 8;
    string Runtime = 9;
    map<string,string> Tags = 10;
    string OrgID = 11;
}

message MethodInfo {
    string Name = 1; 
    bool IsClientStream = 2;
    bool IsServerStream = 3;
}

enum EventType {
    EVENT_UNKNOWN = 0;
    EVENT_REGISTER_REQUEST = 1;
    EVENT_REGISTER_REPLY = 2;
    EVENT_SCHEDULE_REQUEST = 3;
    EVENT_SCHEDULE_REPLY = 4;
    EVENT_CHECK_RUNNING_REQUEST = 5;
    EVENT_CHECK_RUNNING_REPLY = 6;
    EVENT_KILL_TASK_REQUEST = 7;
    EVENT_KILL_TASK_REPLY = 8;
    EVENT_PROJECT_TASK_HASH_REQUEST = 9;
    EVENT_PROJECT_TASK_HASH_REPLY = 10;
    EVENT_COMMAND_REQUEST = 11;
    EVENT_COMMAND_REPLY = 12;
    EVENT_REGISTER_HEARTBEAT_PING = 13;
    EVENT_REGISTER_HEARTBEAT_PONG = 14;
    EVENT_SERVICE_UNSUPPORT = 15;
    EVENT_CLIENT_UNSUPPORT = 16;
}

message ServiceEvent {
    string id = 1;
    EventType type = 2;
    int64 event_time = 3;
    oneof event {
        Event register_reply = 4;
        ScheduleRequest schedule_request = 5;
        CheckRunningRequest check_running_request = 6;
        KillTaskRequest kill_task_request = 7;
        ProjectTaskHashRequest project_task_hash_request = 8;
        CommandRequest command_request = 9;
        EventUnsupport event_unsupport = 10;
    }
}

message ClientEvent {
    string id = 1;
    EventType type = 2;
    int64 event_time = 3;
    oneof event {
        RegisterInfo register_info = 4;
        Result schedule_reply = 5;
        Result check_running_reply = 6;
        Result kill_task_reply = 7;
        ProjectTaskHashReply project_task_hash_reply = 8;
        Result command_reply = 9;
        EventUnsupport event_unsupport = 10;
    }
    Error error = 100;
}

message Error {
    string error = 1;
}

message EventUnsupport {
    EventType type = 1;
    string message = 2;
}

message Event {
    string version = 1;
    string type = 2;
    bytes value = 3;
    int64 event_time = 4;
}

service Agent {
    // 通过该服务下发调度任务给agent，agent收到后开始加锁
    // 1.加锁成功进行执行
    // 2.通过stream反馈给中心任务开始执行
    // 3.任务执行结束后通过stream上报任务完成，若中途stream中断，中心则尝试重新连接恢复上下文，若10秒后仍未建连，则agent主动kill掉任务并上报任务执行失败
    rpc Schedule(ScheduleRequest) returns (Result) {}
    rpc CheckRunning(CheckRunningRequest) returns (Result) {}
    rpc KillTask(KillTaskRequest) returns (Result) {}
    rpc ProjectTaskHash(ProjectTaskHashRequest) returns (ProjectTaskHashReply) {}
    rpc Command(CommandRequest) returns (Result) {}
}

message CommandRequest {
    string command = 1;
    map<string,string> args = 2;
}

message ProjectTaskHashRequest {
    int64 project_id = 1;
}

message ProjectTaskHashReply {
    string hash = 1;
    int64 latest_update_time = 2;
}

message CheckRunningRequest {
    int64 project_id = 1;
    string task_id = 2;
}

message KillTaskRequest {
    int64 project_id = 1;
    string task_id = 2;
}

message Result {
    bool result = 1;
    string message = 2;
}

message ScheduleRequest {
    Event event = 1;
}

message ScheduleReply {
    int64 project_id = 2;
    Event event = 1;
}
