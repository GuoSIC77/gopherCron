// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: gophercron.proto

package cronpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CenterClient is the client API for Center service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterClient interface {
	TryLock(ctx context.Context, opts ...grpc.CallOption) (Center_TryLockClient, error)
	RegisterAgent(ctx context.Context, opts ...grpc.CallOption) (Center_RegisterAgentClient, error)
	StatusReporter(ctx context.Context, in *ScheduleReply, opts ...grpc.CallOption) (*Result, error)
	SendEvent(ctx context.Context, in *SendEventRequest, opts ...grpc.CallOption) (*Result, error)
	RemoveStream(ctx context.Context, in *RemoveStreamRequest, opts ...grpc.CallOption) (*Result, error)
}

type centerClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterClient(cc grpc.ClientConnInterface) CenterClient {
	return &centerClient{cc}
}

func (c *centerClient) TryLock(ctx context.Context, opts ...grpc.CallOption) (Center_TryLockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Center_ServiceDesc.Streams[0], "/cronpb.Center/TryLock", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerTryLockClient{stream}
	return x, nil
}

type Center_TryLockClient interface {
	Send(*TryLockRequest) error
	Recv() (*TryLockReply, error)
	grpc.ClientStream
}

type centerTryLockClient struct {
	grpc.ClientStream
}

func (x *centerTryLockClient) Send(m *TryLockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centerTryLockClient) Recv() (*TryLockReply, error) {
	m := new(TryLockReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centerClient) RegisterAgent(ctx context.Context, opts ...grpc.CallOption) (Center_RegisterAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Center_ServiceDesc.Streams[1], "/cronpb.Center/RegisterAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerRegisterAgentClient{stream}
	return x, nil
}

type Center_RegisterAgentClient interface {
	Send(*RegisterAgentReq) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type centerRegisterAgentClient struct {
	grpc.ClientStream
}

func (x *centerRegisterAgentClient) Send(m *RegisterAgentReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centerRegisterAgentClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centerClient) StatusReporter(ctx context.Context, in *ScheduleReply, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Center/StatusReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) SendEvent(ctx context.Context, in *SendEventRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Center/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) RemoveStream(ctx context.Context, in *RemoveStreamRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Center/RemoveStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServer is the server API for Center service.
// All implementations must embed UnimplementedCenterServer
// for forward compatibility
type CenterServer interface {
	TryLock(Center_TryLockServer) error
	RegisterAgent(Center_RegisterAgentServer) error
	StatusReporter(context.Context, *ScheduleReply) (*Result, error)
	SendEvent(context.Context, *SendEventRequest) (*Result, error)
	RemoveStream(context.Context, *RemoveStreamRequest) (*Result, error)
	mustEmbedUnimplementedCenterServer()
}

// UnimplementedCenterServer must be embedded to have forward compatible implementations.
type UnimplementedCenterServer struct {
}

func (UnimplementedCenterServer) TryLock(Center_TryLockServer) error {
	return status.Errorf(codes.Unimplemented, "method TryLock not implemented")
}
func (UnimplementedCenterServer) RegisterAgent(Center_RegisterAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedCenterServer) StatusReporter(context.Context, *ScheduleReply) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusReporter not implemented")
}
func (UnimplementedCenterServer) SendEvent(context.Context, *SendEventRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedCenterServer) RemoveStream(context.Context, *RemoveStreamRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStream not implemented")
}
func (UnimplementedCenterServer) mustEmbedUnimplementedCenterServer() {}

// UnsafeCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServer will
// result in compilation errors.
type UnsafeCenterServer interface {
	mustEmbedUnimplementedCenterServer()
}

func RegisterCenterServer(s grpc.ServiceRegistrar, srv CenterServer) {
	s.RegisterService(&Center_ServiceDesc, srv)
}

func _Center_TryLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CenterServer).TryLock(&centerTryLockServer{stream})
}

type Center_TryLockServer interface {
	Send(*TryLockReply) error
	Recv() (*TryLockRequest, error)
	grpc.ServerStream
}

type centerTryLockServer struct {
	grpc.ServerStream
}

func (x *centerTryLockServer) Send(m *TryLockReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centerTryLockServer) Recv() (*TryLockRequest, error) {
	m := new(TryLockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Center_RegisterAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CenterServer).RegisterAgent(&centerRegisterAgentServer{stream})
}

type Center_RegisterAgentServer interface {
	Send(*Event) error
	Recv() (*RegisterAgentReq, error)
	grpc.ServerStream
}

type centerRegisterAgentServer struct {
	grpc.ServerStream
}

func (x *centerRegisterAgentServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centerRegisterAgentServer) Recv() (*RegisterAgentReq, error) {
	m := new(RegisterAgentReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Center_StatusReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).StatusReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Center/StatusReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).StatusReporter(ctx, req.(*ScheduleReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Center/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).SendEvent(ctx, req.(*SendEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_RemoveStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).RemoveStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Center/RemoveStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).RemoveStream(ctx, req.(*RemoveStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Center_ServiceDesc is the grpc.ServiceDesc for Center service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Center_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cronpb.Center",
	HandlerType: (*CenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatusReporter",
			Handler:    _Center_StatusReporter_Handler,
		},
		{
			MethodName: "SendEvent",
			Handler:    _Center_SendEvent_Handler,
		},
		{
			MethodName: "RemoveStream",
			Handler:    _Center_RemoveStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TryLock",
			Handler:       _Center_TryLock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterAgent",
			Handler:       _Center_RegisterAgent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gophercron.proto",
}

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// 通过该服务下发调度任务给agent，agent收到后开始加锁
	// 1.加锁成功进行执行
	// 2.通过stream反馈给中心任务开始执行
	// 3.任务执行结束后通过stream上报任务完成，若中途stream中断，中心则尝试重新连接恢复上下文，若10秒后仍未建连，则agent主动kill掉任务并上报任务执行失败
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*Result, error)
	CheckRunning(ctx context.Context, in *CheckRunningRequest, opts ...grpc.CallOption) (*Result, error)
	KillTask(ctx context.Context, in *KillTaskRequest, opts ...grpc.CallOption) (*Result, error)
	ProjectTaskHash(ctx context.Context, in *ProjectTaskHashRequest, opts ...grpc.CallOption) (*ProjectTaskHashReply, error)
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Result, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Agent/Schedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CheckRunning(ctx context.Context, in *CheckRunningRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Agent/CheckRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) KillTask(ctx context.Context, in *KillTaskRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Agent/KillTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ProjectTaskHash(ctx context.Context, in *ProjectTaskHashRequest, opts ...grpc.CallOption) (*ProjectTaskHashReply, error) {
	out := new(ProjectTaskHashReply)
	err := c.cc.Invoke(ctx, "/cronpb.Agent/ProjectTaskHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cronpb.Agent/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// 通过该服务下发调度任务给agent，agent收到后开始加锁
	// 1.加锁成功进行执行
	// 2.通过stream反馈给中心任务开始执行
	// 3.任务执行结束后通过stream上报任务完成，若中途stream中断，中心则尝试重新连接恢复上下文，若10秒后仍未建连，则agent主动kill掉任务并上报任务执行失败
	Schedule(context.Context, *ScheduleRequest) (*Result, error)
	CheckRunning(context.Context, *CheckRunningRequest) (*Result, error)
	KillTask(context.Context, *KillTaskRequest) (*Result, error)
	ProjectTaskHash(context.Context, *ProjectTaskHashRequest) (*ProjectTaskHashReply, error)
	Command(context.Context, *CommandRequest) (*Result, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Schedule(context.Context, *ScheduleRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedAgentServer) CheckRunning(context.Context, *CheckRunningRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRunning not implemented")
}
func (UnimplementedAgentServer) KillTask(context.Context, *KillTaskRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillTask not implemented")
}
func (UnimplementedAgentServer) ProjectTaskHash(context.Context, *ProjectTaskHashRequest) (*ProjectTaskHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectTaskHash not implemented")
}
func (UnimplementedAgentServer) Command(context.Context, *CommandRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Agent/Schedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CheckRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CheckRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Agent/CheckRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CheckRunning(ctx, req.(*CheckRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Agent/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).KillTask(ctx, req.(*KillTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ProjectTaskHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectTaskHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ProjectTaskHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Agent/ProjectTaskHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ProjectTaskHash(ctx, req.(*ProjectTaskHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronpb.Agent/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cronpb.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _Agent_Schedule_Handler,
		},
		{
			MethodName: "CheckRunning",
			Handler:    _Agent_CheckRunning_Handler,
		},
		{
			MethodName: "KillTask",
			Handler:    _Agent_KillTask_Handler,
		},
		{
			MethodName: "ProjectTaskHash",
			Handler:    _Agent_ProjectTaskHash_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _Agent_Command_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gophercron.proto",
}
