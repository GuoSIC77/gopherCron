// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: gophercron.proto

package cronpb

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LockType int32

const (
	LockType_UNKNOWN LockType = 0
	LockType_LOCK    LockType = 1
	LockType_UNLOCK  LockType = 2
)

// Enum value maps for LockType.
var (
	LockType_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOCK",
		2: "UNLOCK",
	}
	LockType_value = map[string]int32{
		"UNKNOWN": 0,
		"LOCK":    1,
		"UNLOCK":  2,
	}
)

func (x LockType) Enum() *LockType {
	p := new(LockType)
	*p = x
	return p
}

func (x LockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockType) Descriptor() protoreflect.EnumDescriptor {
	return file_gophercron_proto_enumTypes[0].Descriptor()
}

func (LockType) Type() protoreflect.EnumType {
	return &file_gophercron_proto_enumTypes[0]
}

func (x LockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockType.Descriptor instead.
func (LockType) EnumDescriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{0}
}

type EventType int32

const (
	EventType_EVENT_UNKNOWN                   EventType = 0
	EventType_EVENT_REGISTER_REQUEST          EventType = 1
	EventType_EVENT_REGISTER_REPLY            EventType = 2
	EventType_EVENT_SCHEDULE_REQUEST          EventType = 3
	EventType_EVENT_SCHEDULE_REPLY            EventType = 4
	EventType_EVENT_CHECK_RUNNING_REQUEST     EventType = 5
	EventType_EVENT_CHECK_RUNNING_REPLY       EventType = 6
	EventType_EVENT_KILL_TASK_REQUEST         EventType = 7
	EventType_EVENT_KILL_TASK_REPLY           EventType = 8
	EventType_EVENT_PROJECT_TASK_HASH_REQUEST EventType = 9
	EventType_EVENT_PROJECT_TASK_HASH_REPLY   EventType = 10
	EventType_EVENT_COMMAND_REQUEST           EventType = 11
	EventType_EVENT_COMMAND_REPLY             EventType = 12
	EventType_EVENT_REGISTER_HEARTBEAT_PING   EventType = 13
	EventType_EVENT_REGISTER_HEARTBEAT_PONG   EventType = 14
	EventType_EVENT_SERVICE_UNSUPPORT         EventType = 15
	EventType_EVENT_CLIENT_UNSUPPORT          EventType = 16
	EventType_EVENT_WORKFLOW_REFRESH          EventType = 17
	EventType_EVENT_REALTIME_PUBLISH          EventType = 18
	EventType_EVENT_MODIFY_NODE_META          EventType = 19
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_UNKNOWN",
		1:  "EVENT_REGISTER_REQUEST",
		2:  "EVENT_REGISTER_REPLY",
		3:  "EVENT_SCHEDULE_REQUEST",
		4:  "EVENT_SCHEDULE_REPLY",
		5:  "EVENT_CHECK_RUNNING_REQUEST",
		6:  "EVENT_CHECK_RUNNING_REPLY",
		7:  "EVENT_KILL_TASK_REQUEST",
		8:  "EVENT_KILL_TASK_REPLY",
		9:  "EVENT_PROJECT_TASK_HASH_REQUEST",
		10: "EVENT_PROJECT_TASK_HASH_REPLY",
		11: "EVENT_COMMAND_REQUEST",
		12: "EVENT_COMMAND_REPLY",
		13: "EVENT_REGISTER_HEARTBEAT_PING",
		14: "EVENT_REGISTER_HEARTBEAT_PONG",
		15: "EVENT_SERVICE_UNSUPPORT",
		16: "EVENT_CLIENT_UNSUPPORT",
		17: "EVENT_WORKFLOW_REFRESH",
		18: "EVENT_REALTIME_PUBLISH",
		19: "EVENT_MODIFY_NODE_META",
	}
	EventType_value = map[string]int32{
		"EVENT_UNKNOWN":                   0,
		"EVENT_REGISTER_REQUEST":          1,
		"EVENT_REGISTER_REPLY":            2,
		"EVENT_SCHEDULE_REQUEST":          3,
		"EVENT_SCHEDULE_REPLY":            4,
		"EVENT_CHECK_RUNNING_REQUEST":     5,
		"EVENT_CHECK_RUNNING_REPLY":       6,
		"EVENT_KILL_TASK_REQUEST":         7,
		"EVENT_KILL_TASK_REPLY":           8,
		"EVENT_PROJECT_TASK_HASH_REQUEST": 9,
		"EVENT_PROJECT_TASK_HASH_REPLY":   10,
		"EVENT_COMMAND_REQUEST":           11,
		"EVENT_COMMAND_REPLY":             12,
		"EVENT_REGISTER_HEARTBEAT_PING":   13,
		"EVENT_REGISTER_HEARTBEAT_PONG":   14,
		"EVENT_SERVICE_UNSUPPORT":         15,
		"EVENT_CLIENT_UNSUPPORT":          16,
		"EVENT_WORKFLOW_REFRESH":          17,
		"EVENT_REALTIME_PUBLISH":          18,
		"EVENT_MODIFY_NODE_META":          19,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_gophercron_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_gophercron_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{1}
}

type AuthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvs map[int64]string `protobuf:"bytes,1,rep,name=kvs,proto3" json:"kvs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AuthReq) Reset() {
	*x = AuthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthReq) ProtoMessage() {}

func (x *AuthReq) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthReq.ProtoReflect.Descriptor instead.
func (*AuthReq) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{0}
}

func (x *AuthReq) GetKvs() map[int64]string {
	if x != nil {
		return x.Kvs
	}
	return nil
}

type AuthReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jwt        string `protobuf:"bytes,1,opt,name=jwt,proto3" json:"jwt,omitempty"`
	ExpireTime int64  `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *AuthReply) Reset() {
	*x = AuthReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthReply) ProtoMessage() {}

func (x *AuthReply) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthReply.ProtoReflect.Descriptor instead.
func (*AuthReply) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{1}
}

func (x *AuthReply) GetJwt() string {
	if x != nil {
		return x.Jwt
	}
	return ""
}

func (x *AuthReply) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type RemoveStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client string `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *RemoveStreamRequest) Reset() {
	*x = RemoveStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamRequest) ProtoMessage() {}

func (x *RemoveStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamRequest.ProtoReflect.Descriptor instead.
func (*RemoveStreamRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveStreamRequest) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

type SendEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region    string        `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	ProjectId int64         `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Event     *ServiceEvent `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Agent     string        `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *SendEventRequest) Reset() {
	*x = SendEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventRequest) ProtoMessage() {}

func (x *SendEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventRequest.ProtoReflect.Descriptor instead.
func (*SendEventRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{3}
}

func (x *SendEventRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SendEventRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SendEventRequest) GetEvent() *ServiceEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SendEventRequest) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

type TryLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TaskId    string   `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	AgentIp   string   `protobuf:"bytes,3,opt,name=agent_ip,json=agentIp,proto3" json:"agent_ip,omitempty"`
	Type      LockType `protobuf:"varint,4,opt,name=type,proto3,enum=cronpb.LockType" json:"type,omitempty"`
	TaskTmpId string   `protobuf:"bytes,5,opt,name=task_tmp_id,json=taskTmpId,proto3" json:"task_tmp_id,omitempty"`
}

func (x *TryLockRequest) Reset() {
	*x = TryLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryLockRequest) ProtoMessage() {}

func (x *TryLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryLockRequest.ProtoReflect.Descriptor instead.
func (*TryLockRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{4}
}

func (x *TryLockRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *TryLockRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TryLockRequest) GetAgentIp() string {
	if x != nil {
		return x.AgentIp
	}
	return ""
}

func (x *TryLockRequest) GetType() LockType {
	if x != nil {
		return x.Type
	}
	return LockType_UNKNOWN
}

func (x *TryLockRequest) GetTaskTmpId() string {
	if x != nil {
		return x.TaskTmpId
	}
	return ""
}

type TryLockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TryLockReply) Reset() {
	*x = TryLockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryLockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryLockReply) ProtoMessage() {}

func (x *TryLockReply) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryLockReply.ProtoReflect.Descriptor instead.
func (*TryLockReply) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{5}
}

func (x *TryLockReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *TryLockReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RegisterAgentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string org_id = 1;
	// int64 project_id = 2;
	// int32 weight = 3;
	Agents []*AgentInfo `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *RegisterAgentReq) Reset() {
	*x = RegisterAgentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAgentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAgentReq) ProtoMessage() {}

func (x *RegisterAgentReq) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAgentReq.ProtoReflect.Descriptor instead.
func (*RegisterAgentReq) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterAgentReq) GetAgents() []*AgentInfo {
	if x != nil {
		return x.Agents
	}
	return nil
}

type RegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents []*AgentInfo `protobuf:"bytes,3,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *RegisterInfo) Reset() {
	*x = RegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterInfo) ProtoMessage() {}

func (x *RegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterInfo.ProtoReflect.Descriptor instead.
func (*RegisterInfo) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterInfo) GetAgents() []*AgentInfo {
	if x != nil {
		return x.Agents
	}
	return nil
}

type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string            `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Systems     []int64           `protobuf:"varint,2,rep,packed,name=Systems,proto3" json:"Systems,omitempty"`
	ServiceName string            `protobuf:"bytes,3,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	Methods     []*MethodInfo     `protobuf:"bytes,4,rep,name=Methods,proto3" json:"Methods,omitempty"`
	Region      string            `protobuf:"bytes,5,opt,name=Region,proto3" json:"Region,omitempty"`
	Host        string            `protobuf:"bytes,6,opt,name=Host,proto3" json:"Host,omitempty"`
	Port        int32             `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
	Weight      int32             `protobuf:"varint,8,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Runtime     string            `protobuf:"bytes,9,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	Tags        map[string]string `protobuf:"bytes,10,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OrgID       string            `protobuf:"bytes,11,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{8}
}

func (x *AgentInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentInfo) GetSystems() []int64 {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *AgentInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AgentInfo) GetMethods() []*MethodInfo {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *AgentInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AgentInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AgentInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AgentInfo) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AgentInfo) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *AgentInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AgentInfo) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

type MethodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IsClientStream bool   `protobuf:"varint,2,opt,name=IsClientStream,proto3" json:"IsClientStream,omitempty"`
	IsServerStream bool   `protobuf:"varint,3,opt,name=IsServerStream,proto3" json:"IsServerStream,omitempty"`
}

func (x *MethodInfo) Reset() {
	*x = MethodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodInfo) ProtoMessage() {}

func (x *MethodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodInfo.ProtoReflect.Descriptor instead.
func (*MethodInfo) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{9}
}

func (x *MethodInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MethodInfo) GetIsClientStream() bool {
	if x != nil {
		return x.IsClientStream
	}
	return false
}

func (x *MethodInfo) GetIsServerStream() bool {
	if x != nil {
		return x.IsServerStream
	}
	return false
}

type ServiceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      EventType `protobuf:"varint,2,opt,name=type,proto3,enum=cronpb.EventType" json:"type,omitempty"`
	EventTime int64     `protobuf:"varint,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*ServiceEvent_RegisterReply
	//	*ServiceEvent_ScheduleRequest
	//	*ServiceEvent_CheckRunningRequest
	//	*ServiceEvent_KillTaskRequest
	//	*ServiceEvent_ProjectTaskHashRequest
	//	*ServiceEvent_CommandRequest
	//	*ServiceEvent_EventUnsupport
	//	*ServiceEvent_RealtimePublish
	//	*ServiceEvent_ModifyNodeMeta
	Event isServiceEvent_Event `protobuf_oneof:"event"`
}

func (x *ServiceEvent) Reset() {
	*x = ServiceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceEvent) ProtoMessage() {}

func (x *ServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceEvent.ProtoReflect.Descriptor instead.
func (*ServiceEvent) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_UNKNOWN
}

func (x *ServiceEvent) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (m *ServiceEvent) GetEvent() isServiceEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ServiceEvent) GetRegisterReply() *Event {
	if x, ok := x.GetEvent().(*ServiceEvent_RegisterReply); ok {
		return x.RegisterReply
	}
	return nil
}

func (x *ServiceEvent) GetScheduleRequest() *ScheduleRequest {
	if x, ok := x.GetEvent().(*ServiceEvent_ScheduleRequest); ok {
		return x.ScheduleRequest
	}
	return nil
}

func (x *ServiceEvent) GetCheckRunningRequest() *CheckRunningRequest {
	if x, ok := x.GetEvent().(*ServiceEvent_CheckRunningRequest); ok {
		return x.CheckRunningRequest
	}
	return nil
}

func (x *ServiceEvent) GetKillTaskRequest() *KillTaskRequest {
	if x, ok := x.GetEvent().(*ServiceEvent_KillTaskRequest); ok {
		return x.KillTaskRequest
	}
	return nil
}

func (x *ServiceEvent) GetProjectTaskHashRequest() *ProjectTaskHashRequest {
	if x, ok := x.GetEvent().(*ServiceEvent_ProjectTaskHashRequest); ok {
		return x.ProjectTaskHashRequest
	}
	return nil
}

func (x *ServiceEvent) GetCommandRequest() *CommandRequest {
	if x, ok := x.GetEvent().(*ServiceEvent_CommandRequest); ok {
		return x.CommandRequest
	}
	return nil
}

func (x *ServiceEvent) GetEventUnsupport() *EventUnsupport {
	if x, ok := x.GetEvent().(*ServiceEvent_EventUnsupport); ok {
		return x.EventUnsupport
	}
	return nil
}

func (x *ServiceEvent) GetRealtimePublish() *RealtimePublish {
	if x, ok := x.GetEvent().(*ServiceEvent_RealtimePublish); ok {
		return x.RealtimePublish
	}
	return nil
}

func (x *ServiceEvent) GetModifyNodeMeta() *ModifyNodeRegisterMeta {
	if x, ok := x.GetEvent().(*ServiceEvent_ModifyNodeMeta); ok {
		return x.ModifyNodeMeta
	}
	return nil
}

type isServiceEvent_Event interface {
	isServiceEvent_Event()
}

type ServiceEvent_RegisterReply struct {
	RegisterReply *Event `protobuf:"bytes,4,opt,name=register_reply,json=registerReply,proto3,oneof"`
}

type ServiceEvent_ScheduleRequest struct {
	ScheduleRequest *ScheduleRequest `protobuf:"bytes,5,opt,name=schedule_request,json=scheduleRequest,proto3,oneof"`
}

type ServiceEvent_CheckRunningRequest struct {
	CheckRunningRequest *CheckRunningRequest `protobuf:"bytes,6,opt,name=check_running_request,json=checkRunningRequest,proto3,oneof"`
}

type ServiceEvent_KillTaskRequest struct {
	KillTaskRequest *KillTaskRequest `protobuf:"bytes,7,opt,name=kill_task_request,json=killTaskRequest,proto3,oneof"`
}

type ServiceEvent_ProjectTaskHashRequest struct {
	ProjectTaskHashRequest *ProjectTaskHashRequest `protobuf:"bytes,8,opt,name=project_task_hash_request,json=projectTaskHashRequest,proto3,oneof"`
}

type ServiceEvent_CommandRequest struct {
	CommandRequest *CommandRequest `protobuf:"bytes,9,opt,name=command_request,json=commandRequest,proto3,oneof"`
}

type ServiceEvent_EventUnsupport struct {
	EventUnsupport *EventUnsupport `protobuf:"bytes,10,opt,name=event_unsupport,json=eventUnsupport,proto3,oneof"`
}

type ServiceEvent_RealtimePublish struct {
	RealtimePublish *RealtimePublish `protobuf:"bytes,11,opt,name=realtime_publish,json=realtimePublish,proto3,oneof"`
}

type ServiceEvent_ModifyNodeMeta struct {
	ModifyNodeMeta *ModifyNodeRegisterMeta `protobuf:"bytes,12,opt,name=modify_node_meta,json=modifyNodeMeta,proto3,oneof"`
}

func (*ServiceEvent_RegisterReply) isServiceEvent_Event() {}

func (*ServiceEvent_ScheduleRequest) isServiceEvent_Event() {}

func (*ServiceEvent_CheckRunningRequest) isServiceEvent_Event() {}

func (*ServiceEvent_KillTaskRequest) isServiceEvent_Event() {}

func (*ServiceEvent_ProjectTaskHashRequest) isServiceEvent_Event() {}

func (*ServiceEvent_CommandRequest) isServiceEvent_Event() {}

func (*ServiceEvent_EventUnsupport) isServiceEvent_Event() {}

func (*ServiceEvent_RealtimePublish) isServiceEvent_Event() {}

func (*ServiceEvent_ModifyNodeMeta) isServiceEvent_Event() {}

type ClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      EventType `protobuf:"varint,2,opt,name=type,proto3,enum=cronpb.EventType" json:"type,omitempty"`
	EventTime int64     `protobuf:"varint,3,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*ClientEvent_RegisterInfo
	//	*ClientEvent_ScheduleReply
	//	*ClientEvent_CheckRunningReply
	//	*ClientEvent_KillTaskReply
	//	*ClientEvent_ProjectTaskHashReply
	//	*ClientEvent_CommandReply
	//	*ClientEvent_EventUnsupport
	//	*ClientEvent_ModifyNodeMeta
	Event  isClientEvent_Event `protobuf_oneof:"event"`
	Error  *Error              `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	Status *status.Status      `protobuf:"bytes,101,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClientEvent) Reset() {
	*x = ClientEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEvent) ProtoMessage() {}

func (x *ClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEvent.ProtoReflect.Descriptor instead.
func (*ClientEvent) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{11}
}

func (x *ClientEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_UNKNOWN
}

func (x *ClientEvent) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

func (m *ClientEvent) GetEvent() isClientEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ClientEvent) GetRegisterInfo() *RegisterInfo {
	if x, ok := x.GetEvent().(*ClientEvent_RegisterInfo); ok {
		return x.RegisterInfo
	}
	return nil
}

func (x *ClientEvent) GetScheduleReply() *Result {
	if x, ok := x.GetEvent().(*ClientEvent_ScheduleReply); ok {
		return x.ScheduleReply
	}
	return nil
}

func (x *ClientEvent) GetCheckRunningReply() *Result {
	if x, ok := x.GetEvent().(*ClientEvent_CheckRunningReply); ok {
		return x.CheckRunningReply
	}
	return nil
}

func (x *ClientEvent) GetKillTaskReply() *Result {
	if x, ok := x.GetEvent().(*ClientEvent_KillTaskReply); ok {
		return x.KillTaskReply
	}
	return nil
}

func (x *ClientEvent) GetProjectTaskHashReply() *ProjectTaskHashReply {
	if x, ok := x.GetEvent().(*ClientEvent_ProjectTaskHashReply); ok {
		return x.ProjectTaskHashReply
	}
	return nil
}

func (x *ClientEvent) GetCommandReply() *Result {
	if x, ok := x.GetEvent().(*ClientEvent_CommandReply); ok {
		return x.CommandReply
	}
	return nil
}

func (x *ClientEvent) GetEventUnsupport() *EventUnsupport {
	if x, ok := x.GetEvent().(*ClientEvent_EventUnsupport); ok {
		return x.EventUnsupport
	}
	return nil
}

func (x *ClientEvent) GetModifyNodeMeta() *Result {
	if x, ok := x.GetEvent().(*ClientEvent_ModifyNodeMeta); ok {
		return x.ModifyNodeMeta
	}
	return nil
}

func (x *ClientEvent) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ClientEvent) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type isClientEvent_Event interface {
	isClientEvent_Event()
}

type ClientEvent_RegisterInfo struct {
	RegisterInfo *RegisterInfo `protobuf:"bytes,4,opt,name=register_info,json=registerInfo,proto3,oneof"`
}

type ClientEvent_ScheduleReply struct {
	ScheduleReply *Result `protobuf:"bytes,5,opt,name=schedule_reply,json=scheduleReply,proto3,oneof"`
}

type ClientEvent_CheckRunningReply struct {
	CheckRunningReply *Result `protobuf:"bytes,6,opt,name=check_running_reply,json=checkRunningReply,proto3,oneof"`
}

type ClientEvent_KillTaskReply struct {
	KillTaskReply *Result `protobuf:"bytes,7,opt,name=kill_task_reply,json=killTaskReply,proto3,oneof"`
}

type ClientEvent_ProjectTaskHashReply struct {
	ProjectTaskHashReply *ProjectTaskHashReply `protobuf:"bytes,8,opt,name=project_task_hash_reply,json=projectTaskHashReply,proto3,oneof"`
}

type ClientEvent_CommandReply struct {
	CommandReply *Result `protobuf:"bytes,9,opt,name=command_reply,json=commandReply,proto3,oneof"`
}

type ClientEvent_EventUnsupport struct {
	EventUnsupport *EventUnsupport `protobuf:"bytes,10,opt,name=event_unsupport,json=eventUnsupport,proto3,oneof"`
}

type ClientEvent_ModifyNodeMeta struct {
	ModifyNodeMeta *Result `protobuf:"bytes,11,opt,name=modify_node_meta,json=modifyNodeMeta,proto3,oneof"`
}

func (*ClientEvent_RegisterInfo) isClientEvent_Event() {}

func (*ClientEvent_ScheduleReply) isClientEvent_Event() {}

func (*ClientEvent_CheckRunningReply) isClientEvent_Event() {}

func (*ClientEvent_KillTaskReply) isClientEvent_Event() {}

func (*ClientEvent_ProjectTaskHashReply) isClientEvent_Event() {}

func (*ClientEvent_CommandReply) isClientEvent_Event() {}

func (*ClientEvent_EventUnsupport) isClientEvent_Event() {}

func (*ClientEvent_ModifyNodeMeta) isClientEvent_Event() {}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{12}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EventUnsupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    EventType `protobuf:"varint,1,opt,name=type,proto3,enum=cronpb.EventType" json:"type,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EventUnsupport) Reset() {
	*x = EventUnsupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUnsupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUnsupport) ProtoMessage() {}

func (x *EventUnsupport) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUnsupport.ProtoReflect.Descriptor instead.
func (*EventUnsupport) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{13}
}

func (x *EventUnsupport) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_UNKNOWN
}

func (x *EventUnsupport) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	EventTime int64  `protobuf:"varint,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{14}
}

func (x *Event) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Event) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string            `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args    map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{15}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandRequest) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ProjectTaskHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ProjectTaskHashRequest) Reset() {
	*x = ProjectTaskHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectTaskHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectTaskHashRequest) ProtoMessage() {}

func (x *ProjectTaskHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectTaskHashRequest.ProtoReflect.Descriptor instead.
func (*ProjectTaskHashRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{16}
}

func (x *ProjectTaskHashRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type ProjectTaskHashReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash             string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	LatestUpdateTime int64  `protobuf:"varint,2,opt,name=latest_update_time,json=latestUpdateTime,proto3" json:"latest_update_time,omitempty"`
}

func (x *ProjectTaskHashReply) Reset() {
	*x = ProjectTaskHashReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectTaskHashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectTaskHashReply) ProtoMessage() {}

func (x *ProjectTaskHashReply) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectTaskHashReply.ProtoReflect.Descriptor instead.
func (*ProjectTaskHashReply) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{17}
}

func (x *ProjectTaskHashReply) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ProjectTaskHashReply) GetLatestUpdateTime() int64 {
	if x != nil {
		return x.LatestUpdateTime
	}
	return 0
}

type CheckRunningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TaskId    string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CheckRunningRequest) Reset() {
	*x = CheckRunningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRunningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRunningRequest) ProtoMessage() {}

func (x *CheckRunningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRunningRequest.ProtoReflect.Descriptor instead.
func (*CheckRunningRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{18}
}

func (x *CheckRunningRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CheckRunningRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type KillTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TaskId    string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *KillTaskRequest) Reset() {
	*x = KillTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillTaskRequest) ProtoMessage() {}

func (x *KillTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillTaskRequest.ProtoReflect.Descriptor instead.
func (*KillTaskRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{19}
}

func (x *KillTaskRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *KillTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{20}
}

func (x *Result) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ScheduleRequest) Reset() {
	*x = ScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRequest) ProtoMessage() {}

func (x *ScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRequest.ProtoReflect.Descriptor instead.
func (*ScheduleRequest) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{21}
}

func (x *ScheduleRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type RealtimePublish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *RealtimePublish) Reset() {
	*x = RealtimePublish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealtimePublish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealtimePublish) ProtoMessage() {}

func (x *RealtimePublish) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealtimePublish.ProtoReflect.Descriptor instead.
func (*RealtimePublish) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{22}
}

func (x *RealtimePublish) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type ScheduleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Event     *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ScheduleReply) Reset() {
	*x = ScheduleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleReply) ProtoMessage() {}

func (x *ScheduleReply) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleReply.ProtoReflect.Descriptor instead.
func (*ScheduleReply) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{23}
}

func (x *ScheduleReply) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ScheduleReply) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type ModifyNodeRegisterMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight int32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *ModifyNodeRegisterMeta) Reset() {
	*x = ModifyNodeRegisterMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gophercron_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyNodeRegisterMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyNodeRegisterMeta) ProtoMessage() {}

func (x *ModifyNodeRegisterMeta) ProtoReflect() protoreflect.Message {
	mi := &file_gophercron_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyNodeRegisterMeta.ProtoReflect.Descriptor instead.
func (*ModifyNodeRegisterMeta) Descriptor() ([]byte, []int) {
	return file_gophercron_proto_rawDescGZIP(), []int{24}
}

func (x *ModifyNodeRegisterMeta) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_gophercron_proto protoreflect.FileDescriptor

var file_gophercron_proto_rawDesc = []byte{
	0x0a, 0x10, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x63, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x12, 0x2a,
	0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x2e, 0x4b, 0x76, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6b, 0x76, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x4b, 0x76,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3e, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x77,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22,
	0xa9, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6d, 0x70, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x54,
	0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a,
	0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x06,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x03, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x07, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x44, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x0a, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xfa, 0x05,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x69, 0x6c,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x19,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x44, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x05, 0x0a, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x55, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x41, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1d, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x0d,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x30, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2a, 0x2d, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x02, 0x2a, 0xd1, 0x04, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x06, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0a, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45,
	0x41, 0x54, 0x5f, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x11, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x10, 0x13, 0x32, 0xb1, 0x03, 0x0a, 0x06, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x07, 0x54, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x79, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e,
	0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x42,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x12, 0x13, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0x0e, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x09, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x32, 0xbc, 0x02, 0x0a, 0x05, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x4b, 0x69,
	0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x16, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x63,
	0x72, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gophercron_proto_rawDescOnce sync.Once
	file_gophercron_proto_rawDescData = file_gophercron_proto_rawDesc
)

func file_gophercron_proto_rawDescGZIP() []byte {
	file_gophercron_proto_rawDescOnce.Do(func() {
		file_gophercron_proto_rawDescData = protoimpl.X.CompressGZIP(file_gophercron_proto_rawDescData)
	})
	return file_gophercron_proto_rawDescData
}

var file_gophercron_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gophercron_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_gophercron_proto_goTypes = []interface{}{
	(LockType)(0),                  // 0: cronpb.LockType
	(EventType)(0),                 // 1: cronpb.EventType
	(*AuthReq)(nil),                // 2: cronpb.AuthReq
	(*AuthReply)(nil),              // 3: cronpb.AuthReply
	(*RemoveStreamRequest)(nil),    // 4: cronpb.RemoveStreamRequest
	(*SendEventRequest)(nil),       // 5: cronpb.SendEventRequest
	(*TryLockRequest)(nil),         // 6: cronpb.TryLockRequest
	(*TryLockReply)(nil),           // 7: cronpb.TryLockReply
	(*RegisterAgentReq)(nil),       // 8: cronpb.RegisterAgentReq
	(*RegisterInfo)(nil),           // 9: cronpb.RegisterInfo
	(*AgentInfo)(nil),              // 10: cronpb.AgentInfo
	(*MethodInfo)(nil),             // 11: cronpb.MethodInfo
	(*ServiceEvent)(nil),           // 12: cronpb.ServiceEvent
	(*ClientEvent)(nil),            // 13: cronpb.ClientEvent
	(*Error)(nil),                  // 14: cronpb.Error
	(*EventUnsupport)(nil),         // 15: cronpb.EventUnsupport
	(*Event)(nil),                  // 16: cronpb.Event
	(*CommandRequest)(nil),         // 17: cronpb.CommandRequest
	(*ProjectTaskHashRequest)(nil), // 18: cronpb.ProjectTaskHashRequest
	(*ProjectTaskHashReply)(nil),   // 19: cronpb.ProjectTaskHashReply
	(*CheckRunningRequest)(nil),    // 20: cronpb.CheckRunningRequest
	(*KillTaskRequest)(nil),        // 21: cronpb.KillTaskRequest
	(*Result)(nil),                 // 22: cronpb.Result
	(*ScheduleRequest)(nil),        // 23: cronpb.ScheduleRequest
	(*RealtimePublish)(nil),        // 24: cronpb.RealtimePublish
	(*ScheduleReply)(nil),          // 25: cronpb.ScheduleReply
	(*ModifyNodeRegisterMeta)(nil), // 26: cronpb.ModifyNodeRegisterMeta
	nil,                            // 27: cronpb.AuthReq.KvsEntry
	nil,                            // 28: cronpb.AgentInfo.TagsEntry
	nil,                            // 29: cronpb.CommandRequest.ArgsEntry
	(*status.Status)(nil),          // 30: google.rpc.Status
}
var file_gophercron_proto_depIdxs = []int32{
	27, // 0: cronpb.AuthReq.kvs:type_name -> cronpb.AuthReq.KvsEntry
	12, // 1: cronpb.SendEventRequest.event:type_name -> cronpb.ServiceEvent
	0,  // 2: cronpb.TryLockRequest.type:type_name -> cronpb.LockType
	10, // 3: cronpb.RegisterAgentReq.agents:type_name -> cronpb.AgentInfo
	10, // 4: cronpb.RegisterInfo.agents:type_name -> cronpb.AgentInfo
	11, // 5: cronpb.AgentInfo.Methods:type_name -> cronpb.MethodInfo
	28, // 6: cronpb.AgentInfo.Tags:type_name -> cronpb.AgentInfo.TagsEntry
	1,  // 7: cronpb.ServiceEvent.type:type_name -> cronpb.EventType
	16, // 8: cronpb.ServiceEvent.register_reply:type_name -> cronpb.Event
	23, // 9: cronpb.ServiceEvent.schedule_request:type_name -> cronpb.ScheduleRequest
	20, // 10: cronpb.ServiceEvent.check_running_request:type_name -> cronpb.CheckRunningRequest
	21, // 11: cronpb.ServiceEvent.kill_task_request:type_name -> cronpb.KillTaskRequest
	18, // 12: cronpb.ServiceEvent.project_task_hash_request:type_name -> cronpb.ProjectTaskHashRequest
	17, // 13: cronpb.ServiceEvent.command_request:type_name -> cronpb.CommandRequest
	15, // 14: cronpb.ServiceEvent.event_unsupport:type_name -> cronpb.EventUnsupport
	24, // 15: cronpb.ServiceEvent.realtime_publish:type_name -> cronpb.RealtimePublish
	26, // 16: cronpb.ServiceEvent.modify_node_meta:type_name -> cronpb.ModifyNodeRegisterMeta
	1,  // 17: cronpb.ClientEvent.type:type_name -> cronpb.EventType
	9,  // 18: cronpb.ClientEvent.register_info:type_name -> cronpb.RegisterInfo
	22, // 19: cronpb.ClientEvent.schedule_reply:type_name -> cronpb.Result
	22, // 20: cronpb.ClientEvent.check_running_reply:type_name -> cronpb.Result
	22, // 21: cronpb.ClientEvent.kill_task_reply:type_name -> cronpb.Result
	19, // 22: cronpb.ClientEvent.project_task_hash_reply:type_name -> cronpb.ProjectTaskHashReply
	22, // 23: cronpb.ClientEvent.command_reply:type_name -> cronpb.Result
	15, // 24: cronpb.ClientEvent.event_unsupport:type_name -> cronpb.EventUnsupport
	22, // 25: cronpb.ClientEvent.modify_node_meta:type_name -> cronpb.Result
	14, // 26: cronpb.ClientEvent.error:type_name -> cronpb.Error
	30, // 27: cronpb.ClientEvent.status:type_name -> google.rpc.Status
	1,  // 28: cronpb.EventUnsupport.type:type_name -> cronpb.EventType
	29, // 29: cronpb.CommandRequest.args:type_name -> cronpb.CommandRequest.ArgsEntry
	16, // 30: cronpb.ScheduleRequest.event:type_name -> cronpb.Event
	16, // 31: cronpb.RealtimePublish.event:type_name -> cronpb.Event
	16, // 32: cronpb.ScheduleReply.event:type_name -> cronpb.Event
	2,  // 33: cronpb.Center.Auth:input_type -> cronpb.AuthReq
	6,  // 34: cronpb.Center.TryLock:input_type -> cronpb.TryLockRequest
	8,  // 35: cronpb.Center.RegisterAgent:input_type -> cronpb.RegisterAgentReq
	13, // 36: cronpb.Center.RegisterAgentV2:input_type -> cronpb.ClientEvent
	25, // 37: cronpb.Center.StatusReporter:input_type -> cronpb.ScheduleReply
	5,  // 38: cronpb.Center.SendEvent:input_type -> cronpb.SendEventRequest
	4,  // 39: cronpb.Center.RemoveStream:input_type -> cronpb.RemoveStreamRequest
	23, // 40: cronpb.Agent.Schedule:input_type -> cronpb.ScheduleRequest
	20, // 41: cronpb.Agent.CheckRunning:input_type -> cronpb.CheckRunningRequest
	21, // 42: cronpb.Agent.KillTask:input_type -> cronpb.KillTaskRequest
	18, // 43: cronpb.Agent.ProjectTaskHash:input_type -> cronpb.ProjectTaskHashRequest
	17, // 44: cronpb.Agent.Command:input_type -> cronpb.CommandRequest
	3,  // 45: cronpb.Center.Auth:output_type -> cronpb.AuthReply
	7,  // 46: cronpb.Center.TryLock:output_type -> cronpb.TryLockReply
	16, // 47: cronpb.Center.RegisterAgent:output_type -> cronpb.Event
	12, // 48: cronpb.Center.RegisterAgentV2:output_type -> cronpb.ServiceEvent
	22, // 49: cronpb.Center.StatusReporter:output_type -> cronpb.Result
	13, // 50: cronpb.Center.SendEvent:output_type -> cronpb.ClientEvent
	22, // 51: cronpb.Center.RemoveStream:output_type -> cronpb.Result
	22, // 52: cronpb.Agent.Schedule:output_type -> cronpb.Result
	22, // 53: cronpb.Agent.CheckRunning:output_type -> cronpb.Result
	22, // 54: cronpb.Agent.KillTask:output_type -> cronpb.Result
	19, // 55: cronpb.Agent.ProjectTaskHash:output_type -> cronpb.ProjectTaskHashReply
	22, // 56: cronpb.Agent.Command:output_type -> cronpb.Result
	45, // [45:57] is the sub-list for method output_type
	33, // [33:45] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_gophercron_proto_init() }
func file_gophercron_proto_init() {
	if File_gophercron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gophercron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryLockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAgentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUnsupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectTaskHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectTaskHashReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRunningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealtimePublish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gophercron_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyNodeRegisterMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gophercron_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ServiceEvent_RegisterReply)(nil),
		(*ServiceEvent_ScheduleRequest)(nil),
		(*ServiceEvent_CheckRunningRequest)(nil),
		(*ServiceEvent_KillTaskRequest)(nil),
		(*ServiceEvent_ProjectTaskHashRequest)(nil),
		(*ServiceEvent_CommandRequest)(nil),
		(*ServiceEvent_EventUnsupport)(nil),
		(*ServiceEvent_RealtimePublish)(nil),
		(*ServiceEvent_ModifyNodeMeta)(nil),
	}
	file_gophercron_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ClientEvent_RegisterInfo)(nil),
		(*ClientEvent_ScheduleReply)(nil),
		(*ClientEvent_CheckRunningReply)(nil),
		(*ClientEvent_KillTaskReply)(nil),
		(*ClientEvent_ProjectTaskHashReply)(nil),
		(*ClientEvent_CommandReply)(nil),
		(*ClientEvent_EventUnsupport)(nil),
		(*ClientEvent_ModifyNodeMeta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gophercron_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gophercron_proto_goTypes,
		DependencyIndexes: file_gophercron_proto_depIdxs,
		EnumInfos:         file_gophercron_proto_enumTypes,
		MessageInfos:      file_gophercron_proto_msgTypes,
	}.Build()
	File_gophercron_proto = out.File
	file_gophercron_proto_rawDesc = nil
	file_gophercron_proto_goTypes = nil
	file_gophercron_proto_depIdxs = nil
}
